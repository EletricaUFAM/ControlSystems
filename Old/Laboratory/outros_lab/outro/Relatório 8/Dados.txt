1) a e b)
Como a saída da planta 2 deu 0, provavelmente o sistema é não observável.

RC = 2
K = 1/2
A = [(-1/RC)*(2-K) (1/RC)*K -1/RC ; (1/RC)*K (1/RC)*K -1/RC ; (1/(2*RC))*(1+2*K) (1/(2*RC))*(1+2*K) -1/RC]
B = [1/RC*(2-K) ; (-1/RC)*K ; (-1/RC)*K]
C = [-(1+K) -(1+K) 0]
D = [1+K]
planta = ss(A,B,C,D)
theta = obsv(A,C) || theta = [C; C*A; C*A*A] || theta = obsv(planta)
verificar o posto de theta
rank(theta) -> retornou 2, que é < 3, logo é não observável

T1 é o theta^(*), que é o kernel de theta
T1 = null(theta, 'r') -> 'r' retorna os valores reais
A*theta^(*) C[está contido] theta^(*)

Então como vimos na aula passada o sistema é controlável, porém temos uma parte observável e uma não observável.
Q = [theta^(*) | omega]
devemos completar omega com 2 colunas quaisquer de forma que Q possua 3 colunas LI
Q = [-1 0 0; 1 1 0; 1 0 1]
Abarra = inv(Q)*A*Q
Bbarra = inv(Q)*B
Cbarra = C*Q
Dbarra = D

Abarra =

   -0.5000   -0.2500    0.5000
         0    0.5000   -1.0000
         0    0.7500   -1.0000

		 /\
		 ||
		 região com 0 é não observável

Bbarra =

   -0.7500
    0.5000
    0.5000

Cbarra =

         0   -1.5000         0

		 /\
		 ||
		 região não observável
		 

Devemos agora separar a parte observável da não observável (Subsistema observável)

partAbarra = Abarra(2:3, 2:3)
partAbarra =

    0.5000   -1.0000
    0.7500   -1.0000

partCbarra = Cbarra(:,2:3)
partCbarra =

   -1.5000         0
   
Q1 = obsv(partAbarra, partCbarra)
Abarra2 = Q1*partAbarra*inv(Q1)
Cbarra2 = partCbarra*inv(Q1)
Q2 é 1 na diagonal principal e nas subdiagonais são a1, a2, a3, no tipo
Q2 = 	[1  0   0 0]
		[a1 1   0 0]
		[a2 a1  1 0]
		[a3 a2 a1 1]
Q2 = [1 0; 1/2 1]
Tá na forma canônica de controlabilidade, mas queremos na forma canônica do controlador.
Q2*Q1 coloca na forma canônica do controlador
Q2*Q1 =
   -1.5000         0
   -1.5000    1.5000

Q3 matriz que coloca a parte observável na forma canônica do observador
fazemos de modo que na primeira coluna e primeira linha sejam 0 e o 1o elemento seja 1, tal que não mexemos na parte não observável, pois ela não influencia na função de transferência
Q3 = [1 0 0; 0 -3/2 0; 0 -3/2 3/2]
Q3 =
    1.0000         0         0
         0   -1.5000         0
         0   -1.5000    1.5000

Achapeu = Q3*Abarra*inv(Q3)
Bchapeu = Q3*Bbarra
Cchapeu = Cbarra*inv(Q3)

Achapeu =      \/
   -0.5000   -0.1667    0.3333
         0   -0.5000    1.0000 <-
         0   -0.2500         0

Bchapeu =
   -0.7500
   -0.7500 <-
         0 <-

Cchapeu =
     0     1     0

pegamos o denominador da função de transferência G(S) da matriz Achapeu, com os valores abaixo de S3 com o valor trocado. Logo ficam 1, 1/2, 1/4
pegamos o numerador da função de transferência G(S) da matriz Bchapeu, retirando-se a parte não observável

parte não observável não aparece na função de transferência

G = tf(planta)

Transfer function:
1.5 s^3 + 0.75 s^2 + 0.375 s + 0.1875
-------------------------------------
      s^3 + s^2 + 0.5 s + 0.125

a parte observável aparece na função de transferência gerada pelo MATLAB, porém ela aparece no numerador e no denominador, podendo ser cancelada
G(S) =
3	(	S^2 + 1/4	  )
- * (-----------------)
2	(S^2 + 1/2*S + 1/4)


2)
RC = 2
K = 1
A = [(-1/RC)*(2-K) (1/RC)*K -1/RC ; (1/RC)*K (1/RC)*K -1/RC ; (1/(2*RC))*(1+2*K) (1/(2*RC))*(1+2*K) -1/RC]
B = [1/RC*(2-K) ; (-1/RC)*K ; (-1/RC)*K]
C = [-(1+K) -(1+K) 0]
D = [1+K]
planta = ss(A,B,C,D)

autovalores de A
eig(A) = [-1/2 ; j*1/2; -j*1/2]

theta = obsv(A,C)
theta =
   -1.5000   -1.5000         0
         0   -1.5000    1.5000
    0.3750    0.3750         0

T1 = null(theta, 'r')
T1 =
    -1
     1
     1

Definimos Q para que todas as colunas fiquem LI
Q = 
	-1		0		0
	1		1		0
	1		0		1

Abarra = inv(Q)*A*Q
Bbarra = inv(Q)*B
Cbarra = C*Q
Dbarra = D

Abarra =
   -0.5000   -0.5000    0.5000
>        0    1.0000   -1.0000
>        0    1.2500   -1.0000
		 /\

Bbarra =
   -0.5000
         0 <
         0 <

Cbarra =
     0    -2     0
	 /\

Dbarra =
     2

Quando tem bloco de 0s no A e no B nas mesmas linhas significa que aquela parte de A é não controlável.
Quando tem bloco de 0s no A e no C na mesma coluna significa que aquela parte de A é não observável.

V = ctrb (A,B)

V =

    0.5000   -0.2500    0.1250
   -0.5000    0.2500   -0.1250
   -0.5000    0.2500   -0.1250
	\____/	  \______________/
	  LI			LD

Vc = colunas LI*2
Vc =
	 1
	-1
	-1
	
Vc = theta^(*)
V1 = Vc intersec theta^(*) =
	-1
	 1
	 1

G = tf(planta)
Transfer function:
  2 s^3 + s^2 + 0.5 s + 0.25
------------------------------
s^3 + 0.5 s^2 + 0.25 s + 0.125

G = 2


Vamos agora declarar K e RC como variáveis simbólicas
syms K RC
A = [(-1/RC)*(2-K) (1/RC)*K -1/RC ; (1/RC)*K (1/RC)*K -1/RC ; (1/(2*RC))*(1+2*K) (1/(2*RC))*(1+2*K) -1/RC]
B = [1/RC*(2-K) ; (-1/RC)*K ; (-1/RC)*K]
C = [-(1+K) -(1+K) 0]
D = [1+K]
theta = [C; C*A; C*A^2]
rank (theta) =
	2

		não observável para todo K
		
T1 = kernel(theta)
T1 = null(theta)
T1 =
 -1
  1
  1
 
Definimos Q para que todas as colunas fiquem LI
Q = 
	-1		0		0
	 1		1		0
	 1		K		1

Abarra = inv(Q)*A*Q
Bbarra = inv(Q)*B
Cbarra = C*Q
Dbarra = D

Abarra =
[ -1/RC*(2-K)-1/RC*K+1/RC,                 -1/RC*K,                    1/RC]
[  1/RC*(2-K)+1/RC*K-2/RC,                  2/RC*K,                   -2/RC]
[  1/RC*(2-K)+1/RC*K-2/RC,   1/RC*K+1/2/RC*(1+2*K),                   -2/RC]
 
 
 
Bbarra =
       -1/RC*(2-K)
 1/RC*(2-K)-1/RC*K
 1/RC*(2-K)-1/RC*K
 
 
 
Cbarra =
[    0, -1-K,    0]
 
 
 
Dbarra =
1+K

podemos utilizar a função simplify ou a simple para simplificar. o que muda é que no simplify temos somente a resposta, e no simple dá o passo a passo


Abarra = simplify(inv(Q)*A*Q)
Abarra =
 
[          -1/RC,        -1/RC*K,           1/RC]
[              0,         2/RC*K,          -2/RC]
[              0, 1/2*(4*K+1)/RC,          -2/RC]
 
 
Bbarra = simplify(inv(Q)*B) 
Bbarra =
 
    (-2+K)/RC
 -2*(-1+K)/RC
 -2*(-1+K)/RC
 
 
Cbarra = simplify(C*Q)
Cbarra =
 
[    0, -1-K,    0]
 
 
Dbarra = simplify(D)
Dbarra =
 
1+K

De acordo com o que foi dito anteriormente para sabermos quando o sistema é controlável pelos valores de Abarra e Bbarra temos que o sistema é não controlável para K = 1

K > 1 => sistema é instável

para obtermos a função de transferência, devemos primeiramente declarar S como variável simbólica
syms S
G(S) = C*(S*I - A)^-1 * B + D
G = C*((S*eye(3) - A)^-1)*B+D

para podermos visualizar melhor
G = simple(C*((S*eye(3) - A)^-1)*B+D)








########## NO MATLAB ##########

>> RC = 2
K = 1/2
A = [(-1/RC)*(2-K) (1/RC)*K -1/RC ; (1/RC)*K (1/RC)*K -1/RC ; (1/(2*RC))*(1+2*K) (1/(2*RC))*(1+2*K) -1/RC]
B = [1/RC*(2-K) ; (-1/RC)*K ; (-1/RC)*K]
C = [-(1+K) -(1+K) 0]
D = [1+K]
planta = ss(A,B,C,D)

RC =

     2


K =

    0.5000


A =

   -0.7500    0.2500   -0.5000
    0.2500    0.2500   -0.5000
    0.5000    0.5000   -0.5000


B =

    0.7500
   -0.2500
   -0.2500


C =

   -1.5000   -1.5000         0


D =

    1.5000

 
a = 
          x1     x2     x3
   x1  -0.75   0.25   -0.5
   x2   0.25   0.25   -0.5
   x3    0.5    0.5   -0.5
 
b = 
          u1
   x1   0.75
   x2  -0.25
   x3  -0.25
 
c = 
         x1    x2    x3
   y1  -1.5  -1.5     0
 
d = 
        u1
   y1  1.5
 
Continuous-time model.
>> theta = obsv(planta)

theta =

   -1.5000   -1.5000         0
    0.7500   -0.7500    1.5000
         0    0.7500   -0.7500

>> rank(theta)

ans =

     2

>> T1 = null(theta, 'r')

T1 =

    -1
     1
     1

>> Q = [-1 0 0; 1 1 0; 1 0 1]

Q =

    -1     0     0
     1     1     0
     1     0     1

>> Abarra = inv(Q)*A*Q

Abarra =

   -0.5000   -0.2500    0.5000
         0    0.5000   -1.0000
         0    0.7500   -1.0000

>> Bbarra = inv(Q)*B

Bbarra =

   -0.7500
    0.5000
    0.5000

>> Cbarra = C*Q

Cbarra =

         0   -1.5000         0

>> Dbarra = D

Dbarra =

    1.5000

>> Cbarra2 = Cbarra(:,2,3)
??? Index exceeds matrix dimensions.

>> Cbarra2 = Cbarra(:2,3)
??? Cbarra2 = Cbarra(:2,3)
                      |
Error: Unexpected MATLAB expression.

>> Cbarra2 = Cbarra(:,2:3)

Cbarra2 =

   -1.5000         0

>> Abarra2 = Abarra(2:3, 2:3)

Abarra2 =

    0.5000   -1.0000
    0.7500   -1.0000

>> Q1 = obsv(Abarra2, Cbarra2)

Q1 =

   -1.5000         0
   -0.7500    1.5000

>> partAbarra2 = Abarra(2:3, 2:3)

partAbarra2 =

    0.5000   -1.0000
    0.7500   -1.0000

>> partCbarra2 = Cbarra(:,2:3)

partCbarra2 =

   -1.5000         0

>> partAbarra = Abarra(2:3, 2:3)

partAbarra =

    0.5000   -1.0000
    0.7500   -1.0000

>> partCbarra = Cbarra(:,2:3)

partCbarra =

   -1.5000         0

>> Q1 = obsv(partAbarra, patCbarra)
??? Undefined function or variable 'patCbarra'.

>> Q1 = obsv(partAbarra, partCbarra)

Q1 =

   -1.5000         0
   -0.7500    1.5000

>> Abarra2 = Q1*Abarra*inv(Q)
??? Error using ==> mtimes
Inner matrix dimensions must agree.

>> Abarra2 = Q1*Abarra*inv(Q1)
??? Error using ==> mtimes
Inner matrix dimensions must agree.

>> Abarra2 = Q1*partAbarra*inv(Q1)

Abarra2 =

         0    1.0000
   -0.2500   -0.5000

>> Cbarra2 = partCbarra*inv(Q)
??? Error using ==> mtimes
Inner matrix dimensions must agree.

>> Cbarra2 = partCbarra*inv(Q1)

Cbarra2 =

     1     0

>> Q2 = [1 0; 1/2 1]

Q2 =

    1.0000         0
    0.5000    1.0000

>> Q2*Q1

ans =

   -1.5000         0
   -1.5000    1.5000

>> Q3 = [1 0 0; 0 -3/2 0; 0 -3/2 3/2]

Q3 =

    1.0000         0         0
         0   -1.5000         0
         0   -1.5000    1.5000

>> Achapeu = inv(Q3)*Abarra*Q3

Achapeu =

   -0.5000   -0.3750    0.7500
         0   -0.5000    1.0000
         0   -0.2500         0

>> Achapeu = Q3*Abarra*inv(Q3)

Achapeu =

   -0.5000   -0.1667    0.3333
         0   -0.5000    1.0000
         0   -0.2500         0

>> Bchapeu = Q3*Bbarra

Bchapeu =

   -0.7500
   -0.7500
         0

>> Cchapeu = Cbarra*inv(Q3)

Cchapeu =

     0     1     0

>> G = tf(planta)
 
Transfer function:
1.5 s^3 + 0.75 s^2 + 0.375 s + 0.1875
-------------------------------------
      s^3 + s^2 + 0.5 s + 0.125
 
>> 3/2*conv([1 1/2], [1 0 1/4])

ans =

    1.5000    0.7500    0.3750    0.1875

>> K=1

K =

     1

>> A = [(-1/RC)*(2-K) (1/RC)*K -1/RC ; (1/RC)*K (1/RC)*K -1/RC ; (1/(2*RC))*(1+2*K) (1/(2*RC))*(1+2*K) -1/RC]

A =

   -0.5000    0.5000   -0.5000
    0.5000    0.5000   -0.5000
    0.7500    0.7500   -0.5000

>> eig(A)

ans =

  -0.5000          
  -0.0000 + 0.5000i
  -0.0000 - 0.5000i

Warning: Using a default value of 0.2 for maximum step size.  The simulation step size will be
equal to or less than this value.  You can disable this diagnostic by setting 'Automatic solver
parameter selection' diagnostic to 'none' in the Diagnostics page of the configuration
parameters dialog.
Warning: Using a default value of 0.2 for maximum step size.  The simulation step size will be
equal to or less than this value.  You can disable this diagnostic by setting 'Automatic solver
parameter selection' diagnostic to 'none' in the Diagnostics page of the configuration
parameters dialog.
>> theta = obsv (A,C)

theta =

   -1.5000   -1.5000         0
         0   -1.5000    1.5000
    0.3750    0.3750         0

>> T1 = null(theta, 'r')

T1 =

    -1
     1
     1

>> Q = [-1 0 0; 1 1 0; 1 0 1]

Q =

    -1     0     0
     1     1     0
     1     0     1

>> Abarra = inv(Q)*A*Q

Abarra =

   -0.5000   -0.5000    0.5000
         0    1.0000   -1.0000
         0    1.2500   -1.0000

>> B = [1/RC*(2-K) ; (-1/RC)*K ; (-1/RC)*K]

B =

    0.5000
   -0.5000
   -0.5000

>> C = [-(1+K) -(1+K) 0]

C =

    -2    -2     0

>> D = [1+K]

D =

     2

>> planta = ss(A,B,C,D)
 
a = 
         x1    x2    x3
   x1  -0.5   0.5  -0.5
   x2   0.5   0.5  -0.5
   x3  0.75  0.75  -0.5
 
b = 
         u1
   x1   0.5
   x2  -0.5
   x3  -0.5
 
c = 
       x1  x2  x3
   y1  -2  -2   0
 
d = 
       u1
   y1   2
 
Continuous-time model.
>> Bbarra = inv(Q)*B

Bbarra =

   -0.5000
         0
         0

>> Cbarra = C*Q

Cbarra =

     0    -2     0

>> Dbarra = D

Dbarra =

     2

>> V = ctrb (A<B)
??? Error using ==> lt
Matrix dimensions must agree.

>> V = ctrb (A,B)

V =

    0.5000   -0.2500    0.1250
   -0.5000    0.2500   -0.1250
   -0.5000    0.2500   -0.1250

>> G = tf(planta)
 
Transfer function:
  2 s^3 + s^2 + 0.5 s + 0.25
------------------------------
s^3 + 0.5 s^2 + 0.25 s + 0.125
 
>> syms K RC
>> A = [(-1/RC)*(2-K) (1/RC)*K -1/RC ; (1/RC)*K (1/RC)*K -1/RC ; (1/(2*RC))*(1+2*K) (1/(2*RC))*(1+2*K) -1/RC]
B = [1/RC*(2-K) ; (-1/RC)*K ; (-1/RC)*K]
C = [-(1+K) -(1+K) 0]
D = [1+K]
 
A =
 
[    -1/RC*(2-K),         1/RC*K,          -1/RC]
[         1/RC*K,         1/RC*K,          -1/RC]
[ 1/2/RC*(1+2*K), 1/2/RC*(1+2*K),          -1/RC]
 
 
 
B =
 
 1/RC*(2-K)
    -1/RC*K
    -1/RC*K
 
 
 
C =
 
[ -1-K, -1-K,    0]
 
 
 
D =
 
1+K
 
 
>> theta = [C; C*A; C*A^2]
 
theta =
 
[                                                                                                     -1-K,                                                                                                     -1-K,                                                                                                        0]
[                                                                             -(-1-K)/RC*(2-K)+(-1-K)/RC*K,                                                                                            2*(-1-K)/RC*K,                                                                                             -2*(-1-K)/RC]
[ (-1-K)*(1/RC^2*(2-K)^2+1/RC^2*K^2-1/2/RC^2*(1+2*K))+(-1-K)*(-1/RC^2*(2-K)*K+1/RC^2*K^2-1/2/RC^2*(1+2*K)),                (-1-K)*(-1/RC^2*(2-K)*K+1/RC^2*K^2-1/2/RC^2*(1+2*K))+(-1-K)*(2/RC^2*K^2-1/2/RC^2*(1+2*K)),                                          (-1-K)*(1/RC^2*(2-K)-1/RC^2*K+1/RC^2)+(-1-K)*(-2/RC^2*K+1/RC^2)]
 
 
>> rank(theta)
 
ans =
 
2
 
 
>> T1 = ker(theta)
??? Undefined function or method 'ker' for input arguments of type 'sym'.

>> T1 = null(theta)
 
T1 =
 
 -1
  1
  1
 
 
>> Abarra = inv(Q)*A*Q
Bbarra = inv(Q)*B
Cbarra = C*Q
Dbarra = D
 
Abarra =
 
[ -1/RC*(2-K)-1/RC*K+1/RC,                 -1/RC*K,                    1/RC]
[  1/RC*(2-K)+1/RC*K-2/RC,                  2/RC*K,                   -2/RC]
[  1/RC*(2-K)+1/RC*K-2/RC,   1/RC*K+1/2/RC*(1+2*K),                   -2/RC]
 
 
 
Bbarra =
 
       -1/RC*(2-K)
 1/RC*(2-K)-1/RC*K
 1/RC*(2-K)-1/RC*K
 
 
 
Cbarra =
 
[    0, -1-K,    0]
 
 
 
Dbarra =
 
1+K
 
 
>> simplify (Abarra)
 
ans =
 
[          -1/RC,        -1/RC*K,           1/RC]
[              0,         2/RC*K,          -2/RC]
[              0, 1/2*(4*K+1)/RC,          -2/RC]
 
 
>> Abarra = simplify(inv(Q)*A*Q)
 
Abarra =
 
[          -1/RC,        -1/RC*K,           1/RC]
[              0,         2/RC*K,          -2/RC]
[              0, 1/2*(4*K+1)/RC,          -2/RC]
 
 
>> Bbarra = simplify(inv(Q)*B)
 
Bbarra =
 
    (-2+K)/RC
 -2*(-1+K)/RC
 -2*(-1+K)/RC
 
 
>> Cbarra = simplify(C*Q)
 
Cbarra =
 
[    0, -1-K,    0]
 
 
>> Dbarra = simplify(D)
 
Dbarra =
 
1+K
 
 
>> simplify (G)
 
Transfer function:
  2 s^3 + s^2 + 0.5 s + 0.25
------------------------------
s^3 + 0.5 s^2 + 0.25 s + 0.125
 
>> sym S
 
ans =
 
S
 
 
>> G = C*((S*eye(3) - A)^-1)*B+D
??? Undefined function or variable 'S'.

>> G = C*((S*eye(3) - A)^-1)*B+D
??? Undefined function or variable 'S'.

>> s
??? Undefined function or variable 's'.

>> S
??? Undefined function or variable 'S'.

>> syms S
>> G = C*((S*eye(3) - A)^-1)*B+D
 
G =
 
(1/2*(-1-K)*(2*S^2*RC^2+2*S*RC-2*K*S*RC+1)*RC/(S^3*RC^3+3*S^2*RC^2-2*S^2*RC^2*K+3*S*RC-2*K*S*RC+1)+1/2*(-1-K)*(2*K*S*RC-1)*RC/(S^3*RC^3+3*S^2*RC^2-2*S^2*RC^2*K+3*S*RC-2*K*S*RC+1))/RC*(2-K)-(1/2*(-1-K)*(2*K*S*RC-1)*RC/(S^3*RC^3+3*S^2*RC^2-2*S^2*RC^2*K+3*S*RC-2*K*S*RC+1)+1/2*(-1-K)*(2*S^2*RC^2+6*S*RC+5-2*K*S*RC)*RC/(S^3*RC^3+3*S^2*RC^2-2*S^2*RC^2*K+3*S*RC-2*K*S*RC+1))/RC*K-(-(-1-K)*S*RC^2/(S^3*RC^3+3*S^2*RC^2-2*S^2*RC^2*K+3*S*RC-2*K*S*RC+1)-(-1-K)*(S*RC+2)*RC/(S^3*RC^3+3*S^2*RC^2-2*S^2*RC^2*K+3*S*RC-2*K*S*RC+1))/RC*K+1+K
 
 
>> G = simplify(C*((S*eye(3) - A)^-1)*B+D)
 
G =jh
 
(S^2*RC^2+S^2*RC^2*K+1+K)/(S^2*RC^2-2*K*S*RC+2*S*RC+1)
 
 
>> G = simple(C*((S*eye(3) - A)^-1)*B+D)
 
G =
 
(S^2*RC^2+1)*(1+K)/(S^2*RC^2-2*K*S*RC+2*S*RC+1)