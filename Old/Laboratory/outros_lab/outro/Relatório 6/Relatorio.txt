a)

Utilizando as matrizes dadas pelo problema, podemos montar o modelo por espaço de estados.
Sabemos que:
x.(t) = A*x(t) + B*u(t)
y(t)  = C*x(t) + D*u(t)

Logo temos as matrizes A, B, C e D

Para que possamos apresentar os gráficos dos estados devemos modificar as matrizes C e D de forma que retornem os valores dos estados, além da saída y
Logo modificamos C tal que
C = [0 4 0; 1 0 0; 0 1 0; 0 0 1] e D = [0; 0; 0; 0]
ao adicionarmos a matriz identidade ao fim de C dizemos que teremos 4 saídas: a saída y, o estado x1, o estado x2 e o estado x3

Após montar o modelo, analisar o circuito em regime permanente, devido a entrada degrau, e comparar com os valores obtidos.

yss = (R2 / (R1 + R2)) * u = 4/6 * 1 = 0,66V
x3ss = yss
x1ss = x2ss = 1/(R1+R2) * u = 0,16A

Comparar com o resultado dos 1os gráficos

b)
Através da análise no nó1, vemos que iL1 = iL2 + iC1 e como x1 = iL1 e x2 = iL2, então temos que iC1 = x1 - x2
Então podemos fazer que x1 - x2 = [1 -1 0]
Logo colocamos um ganho com este valor na saída do demux, para que ele realize a operação x1-x2 e nos retorne iC1
iL1 = [1 -1 0] * [x1]	=	ganho * vetor u (entrada do ganho)
		 [x2]
		 [x3]

Analisando a malha 1 temos que x3 + EL1 + R1x1 = u
Logo EL1 = u - x3 - R1x1
Podemos colocar um ganho na saída do demux para realizar esta equação, de forma que
EL1 = [-2 0 -1] * [x1]	+  u
		  [x2]
		  [x3]

c)
dados x1|, x2| e x3|, e tendo a matriz x podemos encontrar a matriz x|

x| = [ 0     4      0]	 [x1]
     [ 0    -16     4] * [x2]
     [32/3  160/3 -16]   [x3]

     <------ Q ------>

Podemos ver como realizaremos a mudança de base através da figura 1.

Desta forma vimos que:
QA = A|Q
A| = QAQ(^-1)

QB = B|

C|Q = C
C| = CQ^-1



No matlab:

>> A = [-4 0 -2; 0 -4 1; 8/3 -8/3 0]

A =

   -4.0000         0   -2.0000
         0   -4.0000    1.0000
    2.6667   -2.6667         0

>> B = [2; 0; 0]

B =

     2
     0
     0

>> C = [0 4 0]

C =

     0     4     0

>> Q = [0 4 0; 0 -16 4; 32/3 160/3 -16]

Q =

         0    4.0000         0
         0  -16.0000    4.0000
   10.6667   53.3333  -16.0000

>> Ab = Q*A*inv(Q)

Ab =

     0     1     0
     0     0     1
   -32   -24    -8

>> Bb = Q*B

Bb =

         0
         0
   21.3333

>> Cb = C*inv(Q)

Cb =

     1     0     0

Utilizar as novas matrizes no novo modelo.



d) eig = eigenvalue (autovalores)

[AutoVet AutoVal] = eig(A)

AutoVet = matriz de mudança de base (autovetores)
AutoVal = matriz de autovalores (autovalores na diagonal principal)

Os autovalores e autovetores sempre serão conjugados um do outro, pois o polinômio característico possui coeficientes reais.

>> [AutoVet AutoVal] = eig(A)

AutoVet =

  -0.3922 + 0.3922i  -0.3922 - 0.3922i  -0.7071          
   0.1961 - 0.1961i   0.1961 + 0.1961i  -0.7071          
   0.7845             0.7845            -0.0000          


AutoVal =

  -2.0000 + 2.0000i        0                  0          
        0            -2.0000 - 2.0000i        0          
        0                  0            -4.0000          

Logo 	lambda1 = -2 + j2
	lambda2 = -2 - j2
	lambda3 = -4

lambda = autovalor
V = autovetor

Adesacoplado = Q^-1 * A * Q
Bdesacoplado = Q^-1 * B
Cdesacoplado = C * Q

>> Adesacoplado = inv(AutoVet)*A*AutoVet

Adesacoplado =

  -2.0000 + 2.0000i   0.0000 + 0.0000i  -0.0000 + 0.0000i
   0.0000 - 0.0000i  -2.0000 - 2.0000i  -0.0000 - 0.0000i
   0.0000 + 0.0000i   0.0000 - 0.0000i  -4.0000 - 0.0000i

>> Bdesacoplado = inv(AutoVet)*B

Bdesacoplado =

  -0.0000 - 1.6997i
  -0.0000 + 1.6997i
  -0.9428 - 0.0000i

>> Cdesacoplado = C*AutoVet

Cdesacoplado =

   0.7845 - 0.7845i   0.7845 + 0.7845i  -2.8284

Não é possível realizar o modelo desacoplado no simulink, pois os autovalores são complexos.
Também não é possível, pois não podemos gerar valores complexos através do uso destes blocos.


e)
lambda = sigma + jomega
V = Vreal + jVcomplexo

A*V = lambda*V
A*(Vreal + jVcomplexo) = (sigma + jomega)*(Vreal + jVcomplexo)
A*Vreal + j*A*Vcomplexo = sigma*Vreal - omega*Vcomplexo + j*(omega*Vreal + sigma*Vcomplexo)

A*Vreal = sigma*Vreal - omega*Vcomplexo
A*Vcomplexo = omega*Vreal + sigma*Vcomplexo

Q1 = [real(Q(:,1)) imag(Q(:,1)) Q(:,3)]
      real(V1)	   imag(V1)	  V3

A*Q = Q*A|
A*[V1real V1complexo V3] = [A*V1real A*V1complexo A*V3] = [V1real V1complexo V3] * [sigma  omega   0]
										   [-omega sigma   0]
										   [  0      0    -4]
										   <------ A| ------>


2)
x.  =   [-4  2 -1]
	[-3  1  0]*x
	[ 0  0 -2]

y = [1 0 0]
    [0 1 0]*x
    [0 0 1]

a) x(0) = [ 4]
	  [-5]
	  [ 1]

b) x(0) = [4]
	  [6]	A*V = lambda*V
	  [0]

c) x(0) = [ 3]
	  [ 4]
	  [-1]

autovetores
Q = [1]
    [1]
    [0]

autovalores
lambda1 = -1
lambda2 = -2
lambda3 = -2


[lambda + 4	-2		1]
[3	    lambda -1		0]
[0		0	 lambda+2]

pra lambda = -1
[3 -2  1]
[3 -2  0]*V1 = 0
[0  0  1]

V1  = 	[2]
	[3]
	[0]



pra lambda = -2
[2 -2  1]
[3 -3  0]*V2 = 0
[0  0  0]

V2  = 	[1]
	[1]
	[0]


Q = 